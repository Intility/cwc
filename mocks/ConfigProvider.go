// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	config "github.com/intility/cwc/pkg/config"
	mock "github.com/stretchr/testify/mock"

	openai "github.com/sashabaranov/go-openai"
)

// ConfigProvider is an autogenerated mock type for the ConfigProvider type
type ConfigProvider struct {
	mock.Mock
}

type ConfigProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ConfigProvider) EXPECT() *ConfigProvider_Expecter {
	return &ConfigProvider_Expecter{mock: &_m.Mock}
}

// GetConfigDir provides a mock function with given fields:
func (_m *ConfigProvider) GetConfigDir() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfigDir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigProvider_GetConfigDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigDir'
type ConfigProvider_GetConfigDir_Call struct {
	*mock.Call
}

// GetConfigDir is a helper method to define mock.On call
func (_e *ConfigProvider_Expecter) GetConfigDir() *ConfigProvider_GetConfigDir_Call {
	return &ConfigProvider_GetConfigDir_Call{Call: _e.mock.On("GetConfigDir")}
}

func (_c *ConfigProvider_GetConfigDir_Call) Run(run func()) *ConfigProvider_GetConfigDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConfigProvider_GetConfigDir_Call) Return(_a0 string, _a1 error) *ConfigProvider_GetConfigDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConfigProvider_GetConfigDir_Call) RunAndReturn(run func() (string, error)) *ConfigProvider_GetConfigDir_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfig provides a mock function with given fields:
func (_m *ConfigProvider) LoadConfig() (*config.Config, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadConfig")
	}

	var r0 *config.Config
	var r1 error
	if rf, ok := ret.Get(0).(func() (*config.Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigProvider_LoadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfig'
type ConfigProvider_LoadConfig_Call struct {
	*mock.Call
}

// LoadConfig is a helper method to define mock.On call
func (_e *ConfigProvider_Expecter) LoadConfig() *ConfigProvider_LoadConfig_Call {
	return &ConfigProvider_LoadConfig_Call{Call: _e.mock.On("LoadConfig")}
}

func (_c *ConfigProvider_LoadConfig_Call) Run(run func()) *ConfigProvider_LoadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConfigProvider_LoadConfig_Call) Return(_a0 *config.Config, _a1 error) *ConfigProvider_LoadConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConfigProvider_LoadConfig_Call) RunAndReturn(run func() (*config.Config, error)) *ConfigProvider_LoadConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewFromConfigFile provides a mock function with given fields:
func (_m *ConfigProvider) NewFromConfigFile() (openai.ClientConfig, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewFromConfigFile")
	}

	var r0 openai.ClientConfig
	var r1 error
	if rf, ok := ret.Get(0).(func() (openai.ClientConfig, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() openai.ClientConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(openai.ClientConfig)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigProvider_NewFromConfigFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewFromConfigFile'
type ConfigProvider_NewFromConfigFile_Call struct {
	*mock.Call
}

// NewFromConfigFile is a helper method to define mock.On call
func (_e *ConfigProvider_Expecter) NewFromConfigFile() *ConfigProvider_NewFromConfigFile_Call {
	return &ConfigProvider_NewFromConfigFile_Call{Call: _e.mock.On("NewFromConfigFile")}
}

func (_c *ConfigProvider_NewFromConfigFile_Call) Run(run func()) *ConfigProvider_NewFromConfigFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConfigProvider_NewFromConfigFile_Call) Return(_a0 openai.ClientConfig, _a1 error) *ConfigProvider_NewFromConfigFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConfigProvider_NewFromConfigFile_Call) RunAndReturn(run func() (openai.ClientConfig, error)) *ConfigProvider_NewFromConfigFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfigProvider creates a new instance of ConfigProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigProvider {
	mock := &ConfigProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
