// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

type Parser_Expecter struct {
	mock *mock.Mock
}

func (_m *Parser) EXPECT() *Parser_Expecter {
	return &Parser_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: in, out
func (_m *Parser) Execute(in []byte, out interface{}) error {
	ret := _m.Called(in, out)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, interface{}) error); ok {
		r0 = rf(in, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Parser_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Parser_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - in []byte
//   - out interface{}
func (_e *Parser_Expecter) Execute(in interface{}, out interface{}) *Parser_Execute_Call {
	return &Parser_Execute_Call{Call: _e.mock.On("Execute", in, out)}
}

func (_c *Parser_Execute_Call) Run(run func(in []byte, out interface{})) *Parser_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(interface{}))
	})
	return _c
}

func (_c *Parser_Execute_Call) Return(_a0 error) *Parser_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Parser_Execute_Call) RunAndReturn(run func([]byte, interface{}) error) *Parser_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
