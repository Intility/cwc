// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	openai "github.com/sashabaranov/go-openai"
	mock "github.com/stretchr/testify/mock"
)

// ClientProvider is an autogenerated mock type for the ClientProvider type
type ClientProvider struct {
	mock.Mock
}

type ClientProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientProvider) EXPECT() *ClientProvider_Expecter {
	return &ClientProvider_Expecter{mock: &_m.Mock}
}

// NewClientFromConfig provides a mock function with given fields:
func (_m *ClientProvider) NewClientFromConfig() (*openai.Client, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewClientFromConfig")
	}

	var r0 *openai.Client
	var r1 error
	if rf, ok := ret.Get(0).(func() (*openai.Client, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *openai.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openai.Client)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientProvider_NewClientFromConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewClientFromConfig'
type ClientProvider_NewClientFromConfig_Call struct {
	*mock.Call
}

// NewClientFromConfig is a helper method to define mock.On call
func (_e *ClientProvider_Expecter) NewClientFromConfig() *ClientProvider_NewClientFromConfig_Call {
	return &ClientProvider_NewClientFromConfig_Call{Call: _e.mock.On("NewClientFromConfig")}
}

func (_c *ClientProvider_NewClientFromConfig_Call) Run(run func()) *ClientProvider_NewClientFromConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientProvider_NewClientFromConfig_Call) Return(_a0 *openai.Client, _a1 error) *ClientProvider_NewClientFromConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientProvider_NewClientFromConfig_Call) RunAndReturn(run func() (*openai.Client, error)) *ClientProvider_NewClientFromConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientProvider creates a new instance of ClientProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientProvider {
	mock := &ClientProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
